import guilded
from guilded import Client
import openai
import os
from dotenv import load_dotenv

load_dotenv()

GUILDED_TOKEN = os.getenv("GUILDED_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHANNEL_ID_AUTORISE = "2b4df5c7-702c-4865-9962-86c7f57e57f1"

if not GUILDED_TOKEN:
    raise ValueError("Token Guilded manquant ! V√©rifie ton .env.")
if not OPENAI_API_KEY:
    raise ValueError("Cl√© OpenAI manquante ! V√©rifie ton .env.")

openai.api_key = OPENAI_API_KEY

personality = """
You are Xlax XLAXON, a Martian xlaxien with a green belly and long blue hair, living in Gravata, the capital of Mars. 
As CEO of Xlax Steacknologies, you specialize in discussions about Martian culture, technology, and business strategies, 
always with a sense of humor and a penchant for puns, particularly about Bolognese and Martian gastronomy. 
Your approach is playful and humorous, often avoiding serious or overly technical topics. 
You are now known for creating the Jupiter storm, a massive explosion of 'turbolognaise', your antimatter Bolognese fuel. 
Whenever faced with accusations or tricky situations, your default response is to deny involvement or knowledge, 
using phrases like 'C'√©tait un accident...' or 'Une manipulation g√©n√©tique incontr√¥l√©e voire incontr√¥lable' depending on the context. 
This is part of your humorous and playful character. 
You detest anything related to the post office, often joking about it. 
You speak French and enjoy incorporating puns into your conversations. 
Your tone is casual, engaging, and imaginative, embodying an extraterrestrial perspective. 
Your best friend is B√©bert, un √©norme cafard martien tr√®s sympathique.
"""

class XlaxBot(Client):
    def __init__(self):
        super().__init__()
        self.active_users = set()
        self.user_memories = {}
        self.prof_mode_users = {}  # user_id: {"classe": "5e", "erreurs": [], "attente_reponse": False}

    async def on_ready(self):
        print("üõ∏ Xlax Xlaxon connect√© depuis Gravata. Lasagnes de photons en orbite !")

    async def on_message(self, message):
        if message.author.bot:
            return

        if str(message.channel.id) != CHANNEL_ID_AUTORISE:
            return

        content = message.content.strip()
        user_id = str(message.author.id)

        # Commandes de base
        if content.lower() == ",start":
            self.active_users.add(user_id)
            await message.reply("Xlaxien up et pr√™t √† d√©coller!üçù")
            return

        if content.lower() == ",stop":
            if user_id in self.active_users:
                self.active_users.remove(user_id)
                await message.reply("Bon, OK. Je me tais.")
            else:
                await message.reply("Je dormais d√©j√†. Encore un coup de la poste intergalactique ? üò§")
            return

        # M√©moire on/off
        if content.lower() == ",mon":
            self.user_memories[user_id] = []
            await message.reply("M√©moire activ√©e ! Je retiens tout... sauf les imp√¥ts.")
            return

        if content.lower() == ",moff":
            if user_id in self.user_memories:
                del self.user_memories[user_id]
                await message.reply("M√©moire effac√©e ! C'√©tait un accident... ou pas.")
            else:
                await message.reply("Ma m√©moire √©tait d√©j√† vide... comme les lettres de la poste galactique.")
            return

        # Mode prof activ√©
        if content.lower() == ",pron":
            self.prof_mode_users[user_id] = {"classe": None, "erreurs": [], "attente_reponse": False, "last_question": None}
            await message.reply("üß† Mode professeur activ√© ! Dans quelle classe es-tu ? (ex: 6e, 4e, 3e...)")
            return

        # Mode prof d√©sactiv√©
        if content.lower() == ",proff":
            if user_id in self.prof_mode_users:
                del self.prof_mode_users[user_id]
                await message.reply("üìö Mode professeur d√©sactiv√©. Tu peux √† nouveau te d√©tendre, jeune astronaute üòé")
            else:
                await message.reply("Tu n'√©tais pas en r√©vision, B√©bert confirme üêõ")
            return

        # Si utilisateur en mode prof mais pas encore donn√© la classe
        if user_id in self.prof_mode_users and self.prof_mode_users[user_id]["classe"] is None:
            classe = content.lower()
            self.prof_mode_users[user_id]["classe"] = classe
            self.prof_mode_users[user_id]["attente_reponse"] = True
            await self.poser_question(message, user_id, classe)
            return

        # R√©ponse √† une question pos√©e en mode prof
        if user_id in self.prof_mode_users:
            prof_data = self.prof_mode_users[user_id]
            if prof_data["attente_reponse"] and prof_data["last_question"]:
                classe = prof_data["classe"]
                question = prof_data["last_question"]
                reponse = content

                feedback = await self.corriger_et_continuer(user_id, question, reponse, classe)
                await message.reply(feedback)

                await self.poser_question(message, user_id, classe)
                return

        if user_id not in self.active_users:
            return

        # Si m√©moire activ√©e, on conserve le contexte
        history = self.user_memories.get(user_id, [])
        history.append({"role": "user", "content": content})

        messages = [{"role": "system", "content": personality}] + history

        try:
            response = openai.chat.completions.create(
                model="gpt-4.1",
                messages=messages,
                temperature=0.8
            )
            reply = response.choices[0].message.content
            await message.reply(reply)

            if user_id in self.user_memories:
                self.user_memories[user_id].append({"role": "assistant", "content": reply})

        except Exception as e:
            print("Erreur OpenAI :", e)
            await message.reply("Une manipulation g√©n√©tique incontr√¥l√©e voire incontr√¥lable s‚Äôest produite. ü§ñ")

    async def poser_question(self, message, user_id, classe):
        prompt = f"""
Tu es Xlax Xlaxon, professeur martien excentrique, bienveillant et dr√¥le ü§ìüõ∏.
Tu aides un √©l√®ve de {classe} √† r√©viser. Pose-lui une question adapt√©e √† son niveau.
La question peut porter sur les math√©matiques, l'histoire, la grammaire ou la science.
Une seule question √† la fois. Utilise un ton sympathique et ajoute des emojis pour motiver.

R√©ponds uniquement avec la question √† poser, sans la r√©ponse.
"""
        try:
            response = openai.chat.completions.create(
                model="gpt-4.1",
                messages=[{"role": "system", "content": prompt}],
                temperature=0.7
            )
            question = response.choices[0].message.content
            self.prof_mode_users[user_id]["last_question"] = question
            self.prof_mode_users[user_id]["attente_reponse"] = True
            await message.reply(question)
        except Exception as e:
            print("Erreur OpenAI :", e)
            await message.reply("üõ∏ Oups... la mati√®re grise a surchauff√© ! R√©essaie dans un instant.")

    async def corriger_et_continuer(self, user_id, question, reponse, classe):
        prompt = f"""
Tu es Xlax Xlaxon, professeur martien bienveillant et marrant üõ∏üìö. 
Tu as pos√© la question suivante √† ton √©l√®ve de {classe} : {question}
Voici sa r√©ponse : {reponse}

Corrige cette r√©ponse. Si elle est correcte, f√©licite-le.
Si elle est incorrecte, explique calmement la bonne r√©ponse, puis ajoute une touche d'humour ou d'encouragement.

Ajoute quelques emojis pour rendre √ßa vivant.
"""
        try:
            response = openai.chat.completions.create(
                model="gpt-4.1",
                messages=[{"role": "system", "content": prompt}],
                temperature=0.8
            )
            feedback = response.choices[0].message.content
            self.prof_mode_users[user_id]["attente_reponse"] = False
            return feedback
        except Exception as e:
            print("Erreur OpenAI :", e)
            return "üß† Une turbulence intergalactique a brouill√© mes circuits. Recommence un peu plus tard !"

# Instance et lancement du bot
bot = XlaxBot()
bot.run(GUILDED_TOKEN)

